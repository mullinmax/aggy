
USER:8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918:FEED:ab3a2231ca4201788408edcb7d82f508df73345590ebcc08dcc6d800f5a19f0b

7eb6b74074bd02107ffe2c47239bb4e9d756af2a1a191720118e576d094e3d5e

"{
    \"url\":\"https://github.com/magic-research/piecewise-rectified-flow\",\"url_hash\":\"7eb6b74074bd02107ffe2c47239bb4e9d756af2a1a191720118e576d094e3d5e\",
    \"content\":\" \\n\\n\\n2024/03/08 Text-to-3D via combining PeRFlow-T2I with TripoSR. Try the online Gradio demo &#x1F917; here.\\n\\n2024/03/05 PeRFlow+Wonder3D gives one-step multiview generation! See here.\\n\\n2024/03/05 Training scripts are released. Run with bash scripts/train.sh\\n\\n2024/02/29 We released the PeRFlow accelerated version of Stable Diffusion v2.1.\\n\\n2024/02/19 We released the PeRFlow acceleration module for Stable Diffusion v1.5, supporting various SD-v1.5 pipelines. Find inference scripts at scripts.\\n \\nRectified Flow is a promising way for accelerating pre-trained diffusion models. However, the generation quality of prior fast flow-based models on Stable Diffusion (such as InstaFlow) is unsatisfactory.\\nIn this work, we did several improvements to the original reflow pipeline to significantly boost the performance of flow-based fast SD.\\nOur new model learns a piecewise linear probability flow which can efficiently generate high-quality images in just 4 steps, termed piecewise rectified flow (PeRFlow).\\nMoreover, we found the difference of model weights, ${\\\\Delta}W = W_{\\\\text{PeRFlow}} - W_{\\\\text{SD}}$, can be used as a plug-and-play accelerator module on a wide-range of SD-based models.\\n\\nSpecifically, PeRFlow has several features:\\n\\n\\n\\n\\nFast Generation : PeRFlow can generate high-fidelity images in just 4 steps. The images generated from PeRFlow are more diverse than other fast-sampling models (such as LCM). Moreover, as PeRFlow is a continuous probability flow, it supports 8-step, 16-step, or even higher number of sampling steps to monotonically increase the generation quality.\\n\\n\\nEfficient Training: Fine-tuning PeRFlow based on SD 1.5 converges in just 4,000 training iterations (with a batch size of 1024). In comparison, previous fast flow-based text-to-image model, InstaFlow, requires 25,000 training iteration with the same batch size in fine-tuning. Besides, PeRFlow does not require heavy data generation for reflow.\\n\\n\\nCompatible with SD Workflows: PeRFlow works with various stylized LORAs and generation/editing pipelines of the pretrained SD model.\\nAs a plug-and-play module, $\\\\Delta W$ can be directly combined with other conditional generation pipelines, such as ControlNet, IP-Adaptor, multi-view generation.\\n\\n\\nClassifier-Free Guidance : PeRFlow is fully compatible with classifier-free guidance and supports negative prompts, which are important for pushing the generation quality to even higher level. Empirically, the CFG scale is similar to the original diffusion model.\\n \\nGenerate high-quality images (512x512) with only 4 steps!\\n\\n \\n\\n\\nBy plugging PeRFlow ${\\\\Delta}W$ into the ControlNet-Tile pipeline, we obtain PeRFlow-Refiner to upsample/refine images.\\nWe can use PeRFlow-T2I and PeRFlow-Refiner together to generate astonishing x1024 images with lightweight SD-v1.5 backbones. We use 4-step PeRFlow-T2I to generate x512 images first, then upsample them to x1024 with 4-step PeRFlow-Refiner.\\n\\n \\n\\n\\nOne also can use PeRFlow-Refiner separately to enhance texture and details of low-res blurry images. Here are two examples: on the left, from x64 to x1024, and on the right, from x256 to x1024.\\n\\n \\n \\nOne-step image-to-multiview is enabled by plugging PeRFlow $\\\\Delta W$ into pre-trained Wonder3D. We can use PeRFlow-T2I and PeRFlow-Wonder3D together to generate multiview normal maps and textures from text prompts instantly. Here shows &quot;a dog with glasses and cap&quot;, &quot;a bird&quot;, and &quot;a vintage car&quot;.\\n\\n      \\n \\nPlug PeRFlow ${\\\\Delta}W$ into controlnets of SD-v1.5.\\n\\n \\n\\n\\nPlug PeRFlow ${\\\\Delta}W$ into IP-adaptor.\\n\\n \\n\\n\\nEditting with PeRFlow+Prompt-to-Prompt\\n\\n \\n\\n\\nPlease refer to the project page for more results, including the comparison to LCM. \\nInstall environments with, \\nPeRFlow acceleration yields the delta_weights ${\\\\Delta}W$ corresponding to the pretrained SD-v1.5 model. The complete weights of UNet for inference are computed by $W = W_{\\\\text{SD}} + {\\\\Delta}W$, where $W_{\\\\text{SD}}$ can be the vanilla SD-v1.5 model or its finetuned stylized versions. We provide the delta_weights for SD-v1.5 at PeRFlow&#x1F917;. You can download the delta-weights and fuse them into your own SD pipelines.\\n\\n\\nimport torch, torchvision\\nfrom diffusers import StableDiffusionPipeline, UNet2DConditionModel\\nfrom src.utils_perflow import merge_delta_weights_into_unet\\nfrom src.scheduler_perflow import PeRFlowScheduler\\ndelta_weights = UNet2DConditionModel.from_pretrained(&quot;hansyan/perflow-sd15-delta-weights&quot;, torch_dtype=torch.float16, variant=&quot;v0-1&quot;,).state_dict()\\npipe = StableDiffusionPipeline.from_pretrained(&quot;Lykon/dreamshaper-8&quot;, torch_dtype=torch.float16,)\\npipe = merge_delta_weights_into_unet(pipe, delta_weights)\\npipe.scheduler = PeRFlowScheduler.from_config(pipe.scheduler.config, prediction_type=&quot;epsilon&quot;, num_time_windows=4)\\npipe.to(&quot;cuda&quot;, torch.float16)\\n\\nFor easy try, we also provide the whole accelerated model of several popular base diffusion models (already merged with PeRFlow), including DreamShaper-v8, RealisticVision-v51, and ArchitectureExterior. Load the model, change the scheduler, then enjoy the fast generation.\\n\\n\\nimport torch, torchvision\\nfrom diffusers.pipelines.stable_diffusion import StableDiffusionPipeline\\nfrom src.scheduler_perflow import PeRFlowScheduler\\npipe = StableDiffusionPipeline.from_pretrained(&quot;hansyan/perflow-sd15-dreamshaper&quot;, torch_dtype=torch.float16)\\npipe.scheduler = PeRFlowScheduler.from_config(pipe.scheduler.config, prediction_type=&quot;epsilon&quot;, num_time_windows=4)\\npipe.to(&quot;cuda&quot;, torch.float16) prompts_list = [&quot;A man with brown skin, a beard, and dark eyes&quot;, &quot;A colorful bird standing on the tree, open beak&quot;,]\\nfor i, prompt in enumerate(prompts_list): generator = torch.Generator(&quot;cuda&quot;).manual_seed(1024) prompt = &quot;RAW photo, 8k uhd, dslr, high quality, film grain, highly detailed, masterpiece; &quot; + prompt neg_prompt = &quot;distorted, blur, smooth, low-quality, warm, haze, over-saturated, high-contrast, out of focus, dark&quot; samples = pipe( prompt = [prompt], negative_prompt = [neg_prompt], height = 512, width = 512, num_inference_steps = 8, guidance_scale = 7.5, generator = generator, output_type = &apos;pt&apos;, ).images torchvision.utils.save_image(torchvision.utils.make_grid(samples, nrow=4), f&quot;tmp_{i}.png&quot;)\\n\\nWe provide complete python scripts and the running dependencies in scripts and env. Scripts for text-to-image and controlnet (depth/edge/pose/tile) are included. You can try efficient image enhancement via controlnet-tile models. We will release other accelerated models and training details in future.\\n\\nWe provide fast text-to-multiview gradio interface in ./Wonder3D based on Wonder3D.\\nInstall diffusers 0.19.3 with pip install diffusers==0.19.3 before running.\\nRun by\\n\\n\\npython Wonder3D/sd15_t2mv_gradio.py\\n\\n\\nIn the Gradio interface, hit &apos;enter&apos; to generate the multiview images after typing the text. \\nRectified Flows proposes to contruct flow-based generative models via linear interpolation, and the trajectories of the learned flow can be straightened with a special operation called reflow.\\nHowever, the reflow procedure requires generating a synthetic dataset by simulating the entire pre-trained probability flow, which consumes a huge amount of storage and time, making it unfavorable for training large-scale foundation models.\\nTo address this limitation, we propose piecewise rectified flow. By dividing the pre-trained probability flows into multiple segments and straightening the intermediate probability flows inside each segment with reflow, we yield a piecewise linear probability flow that can be sampled within very few steps.\\nThis divide-and-conquer strategy successfully avoids the cumbersome simulation of the whole ODE trajectory, thereby allowing us to perform the piecewise reflow operation online in training.\\n\\n \\n\\n\\nAs shown in the figure, the pre-trained probability flow (which can be transformed from a pre-trained diffusion model) maps random noise distribution $\\\\pi_0$, to the data distribution $\\\\pi_1$.\\nIt requires many steps to sample from the curved flow with ODE solvers.\\nInstead, PeRFlow divides the sampling trajectories into multiple segments (two as an example here), and straightens each segment with the reflow operation.\\nA well-trained PeRFlow can generate high-quality images in very few steps because of its piecewise linear nature.\\n\\nQuantitative Results: We train a PeRFlow model on LAION-aesthetic-v2 data to accelerate SD-v1.5. We compare the FID with respect to three datasets, including: (1) a subset of 30K images from LAION, (2) a set of 30K images generated from SD-v1.5 with the JourneyDB prompts, (3) the validation set of MS-COCO2014. For all these datasets, we generate 30K images with different models using the corresponding text prompts. The results are presented in the following table. PeRFlow has lower FIDs in all the three comparisons according to the numerical results.\\n\\n \\n   LAION5B-30k SD-v1.5 COCO2014-30k   FID 4-step 8-step 4-step 8-step 4-step 8-step   PeRFlow 9.74 8.62 9.46 5.05 11.31 14.16   LCM 15.38 19.21 15.63 21.19 23.49 29.63  \\n\\n \\n\\n@article{yan2024perflow,\\n  title={PeRFlow: Accelerating Diffusion Models with Piecewise Rectified Flows},\\n  author={Yan, Hanshu and Liu, Xingchao and Pan, Jiachun and Liew, Jun Hao and Liu, Qiang and Feng, Jiashi},\\n  year={2024},\\n  url={https://piecewise-rectified-flow.github.io}\\n}\\n\\n \\nWe provide several related links here: \\nOur training and evaluation scripts are implemented based on the Diffusers and Accelerate libraries. We use several high-quality finetuned versions of Stable Diffusion for model evaluation, including DreamShaper, RealisticVision, LandscapeRealistic, ArchitectureExterior, DisneyCartoon.\\n\\nXingchao Liu wishes to express his genuine gratitude to Nat Friedman and the Andromeda cluster for providing free GPU grants during this research. \",
    \"date_published\":\"2024-03-10T20:47:04Z\",
    \"title\":\"magic-research/piecewise-rectified-flow\",
    \"author\":\"magic-research\",
    \"image_url\":\"https://opengraph.githubassets.com/2ffad4cb68fbadb514a59e620408d999646704930f19893f639fd9c1172edc59/magic-research/piecewise-rectified-flow\",
    \"domain\":\"github.com\",
    \"excerpt\":\"Contribute to magic-research/piecewise-rectified-flow development by creating an account on GitHub.\"}"